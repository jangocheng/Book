package com.xf.oschina.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xf.oschina.module.login.domain.Token;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN".
*/
public class TokenDao extends AbstractDao<Token, String> {

    public static final String TABLENAME = "TOKEN";

    /**
     * Properties of entity Token.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Access_token = new Property(1, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Refresh_token = new Property(2, String.class, "refresh_token", false, "REFRESH_TOKEN");
        public final static Property Token_type = new Property(3, String.class, "token_type", false, "TOKEN_TYPE");
        public final static Property Expires_in = new Property(4, String.class, "expires_in", false, "EXPIRES_IN");
    }


    public TokenDao(DaoConfig config) {
        super(config);
    }
    
    public TokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"ACCESS_TOKEN\" TEXT," + // 1: access_token
                "\"REFRESH_TOKEN\" TEXT," + // 2: refresh_token
                "\"TOKEN_TYPE\" TEXT," + // 3: token_type
                "\"EXPIRES_IN\" TEXT);"); // 4: expires_in
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Token entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(2, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(3, refresh_token);
        }
 
        String token_type = entity.getToken_type();
        if (token_type != null) {
            stmt.bindString(4, token_type);
        }
 
        String expires_in = entity.getExpires_in();
        if (expires_in != null) {
            stmt.bindString(5, expires_in);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Token entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(2, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(3, refresh_token);
        }
 
        String token_type = entity.getToken_type();
        if (token_type != null) {
            stmt.bindString(4, token_type);
        }
 
        String expires_in = entity.getExpires_in();
        if (expires_in != null) {
            stmt.bindString(5, expires_in);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Token readEntity(Cursor cursor, int offset) {
        Token entity = new Token( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // access_token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // refresh_token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // expires_in
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Token entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccess_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRefresh_token(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpires_in(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Token entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(Token entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Token entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
