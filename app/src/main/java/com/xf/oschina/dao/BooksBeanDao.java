package com.xf.oschina.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xf.oschina.module.story.domain.BooksBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOKS_BEAN".
*/
public class BooksBeanDao extends AbstractDao<BooksBean, String> {

    public static final String TABLENAME = "BOOKS_BEAN";

    /**
     * Properties of entity BooksBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property ShortIntro = new Property(3, String.class, "shortIntro", false, "SHORT_INTRO");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Site = new Property(5, String.class, "site", false, "SITE");
        public final static Property MajorCate = new Property(6, String.class, "majorCate", false, "MAJOR_CATE");
        public final static Property MinorCate = new Property(7, String.class, "minorCate", false, "MINOR_CATE");
        public final static Property AllowMonthly = new Property(8, boolean.class, "allowMonthly", false, "ALLOW_MONTHLY");
        public final static Property Banned = new Property(9, int.class, "banned", false, "BANNED");
        public final static Property LatelyFollower = new Property(10, int.class, "latelyFollower", false, "LATELY_FOLLOWER");
        public final static Property RetentionRatio = new Property(11, String.class, "retentionRatio", false, "RETENTION_RATIO");
        public final static Property ParentId = new Property(12, String.class, "parentId", false, "PARENT_ID");
    }


    public BooksBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BooksBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOKS_BEAN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"TITLE\" TEXT," + // 1: title
                "\"AUTHOR\" TEXT," + // 2: author
                "\"SHORT_INTRO\" TEXT," + // 3: shortIntro
                "\"COVER\" TEXT," + // 4: cover
                "\"SITE\" TEXT," + // 5: site
                "\"MAJOR_CATE\" TEXT," + // 6: majorCate
                "\"MINOR_CATE\" TEXT," + // 7: minorCate
                "\"ALLOW_MONTHLY\" INTEGER NOT NULL ," + // 8: allowMonthly
                "\"BANNED\" INTEGER NOT NULL ," + // 9: banned
                "\"LATELY_FOLLOWER\" INTEGER NOT NULL ," + // 10: latelyFollower
                "\"RETENTION_RATIO\" TEXT," + // 11: retentionRatio
                "\"PARENT_ID\" TEXT);"); // 12: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOKS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BooksBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String shortIntro = entity.getShortIntro();
        if (shortIntro != null) {
            stmt.bindString(4, shortIntro);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(6, site);
        }
 
        String majorCate = entity.getMajorCate();
        if (majorCate != null) {
            stmt.bindString(7, majorCate);
        }
 
        String minorCate = entity.getMinorCate();
        if (minorCate != null) {
            stmt.bindString(8, minorCate);
        }
        stmt.bindLong(9, entity.getAllowMonthly() ? 1L: 0L);
        stmt.bindLong(10, entity.getBanned());
        stmt.bindLong(11, entity.getLatelyFollower());
 
        String retentionRatio = entity.getRetentionRatio();
        if (retentionRatio != null) {
            stmt.bindString(12, retentionRatio);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(13, parentId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BooksBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String shortIntro = entity.getShortIntro();
        if (shortIntro != null) {
            stmt.bindString(4, shortIntro);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(6, site);
        }
 
        String majorCate = entity.getMajorCate();
        if (majorCate != null) {
            stmt.bindString(7, majorCate);
        }
 
        String minorCate = entity.getMinorCate();
        if (minorCate != null) {
            stmt.bindString(8, minorCate);
        }
        stmt.bindLong(9, entity.getAllowMonthly() ? 1L: 0L);
        stmt.bindLong(10, entity.getBanned());
        stmt.bindLong(11, entity.getLatelyFollower());
 
        String retentionRatio = entity.getRetentionRatio();
        if (retentionRatio != null) {
            stmt.bindString(12, retentionRatio);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(13, parentId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BooksBean readEntity(Cursor cursor, int offset) {
        BooksBean entity = new BooksBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortIntro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // site
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // majorCate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // minorCate
            cursor.getShort(offset + 8) != 0, // allowMonthly
            cursor.getInt(offset + 9), // banned
            cursor.getInt(offset + 10), // latelyFollower
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // retentionRatio
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // parentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BooksBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortIntro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSite(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMajorCate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMinorCate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAllowMonthly(cursor.getShort(offset + 8) != 0);
        entity.setBanned(cursor.getInt(offset + 9));
        entity.setLatelyFollower(cursor.getInt(offset + 10));
        entity.setRetentionRatio(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setParentId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BooksBean entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(BooksBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BooksBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
