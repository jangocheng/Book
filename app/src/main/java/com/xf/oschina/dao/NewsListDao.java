package com.xf.oschina.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xf.oschina.module.book.domain.NewsList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_LIST".
*/
public class NewsListDao extends AbstractDao<NewsList, Void> {

    public static final String TABLENAME = "NEWS_LIST";

    /**
     * Properties of entity NewsList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property PubDate = new Property(2, String.class, "pubDate", false, "PUB_DATE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Authorid = new Property(4, int.class, "authorid", false, "AUTHORID");
        public final static Property CommentCount = new Property(5, int.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
    }


    public NewsListDao(DaoConfig config) {
        super(config);
    }
    
    public NewsListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_LIST\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"PUB_DATE\" TEXT," + // 2: pubDate
                "\"TITLE\" TEXT," + // 3: title
                "\"AUTHORID\" INTEGER NOT NULL ," + // 4: authorid
                "\"COMMENT_COUNT\" INTEGER NOT NULL ," + // 5: commentCount
                "\"TYPE\" INTEGER NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(3, pubDate);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getAuthorid());
        stmt.bindLong(6, entity.getCommentCount());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(3, pubDate);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getAuthorid());
        stmt.bindLong(6, entity.getCommentCount());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NewsList readEntity(Cursor cursor, int offset) {
        NewsList entity = new NewsList( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pubDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getInt(offset + 4), // authorid
            cursor.getInt(offset + 5), // commentCount
            cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsList entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPubDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthorid(cursor.getInt(offset + 4));
        entity.setCommentCount(cursor.getInt(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NewsList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NewsList entity) {
        return null;
    }

    @Override
    public boolean hasKey(NewsList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
